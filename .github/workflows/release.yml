name: Build and Release

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

# Add permissions needed for creating releases
permissions:
  contents: write
  packages: write

jobs:
  compile:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v3

      - name: Set up JDK 21
        uses: actions/setup-java@v3
        with:
          java-version: "21"
          distribution: "temurin"

      - name: Create build directory
        run: mkdir -p build

      - name: Compile Java files
        run: |
          javac -d build -sourcepath src $(find src/jabberpoint -name "*.java")

      - name: Copy resources
        run: |
          for ext in xml jpg gif; do
            find . -maxdepth 1 -name "*.$ext" -exec cp {} build/ \; 2>/dev/null || true
            find src -name "*.$ext" -exec cp {} build/ \; 2>/dev/null || true
          done

      - name: Create JAR manifest
        run: |
          echo "Main-Class: jabberpoint.JabberPoint" > manifest.txt

      - name: Create JAR file
        run: |
          cd build
          jar cfm ../JabberPoint.jar ../manifest.txt jabberpoint/*

      - name: Upload JAR file
        uses: actions/upload-artifact@v4
        with:
          name: jabberpoint-jar
          path: JabberPoint.jar
          retention-days: 30

  create_release:
    needs: compile
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Get latest tag
        id: get_latest_tag
        run: |
          # Get the latest tag, default to v1.7.0 if none exists
          git fetch --tags
          latest_tag=$(git tag --sort=-v:refname | head -n 1)
          if [ -z "$latest_tag" ]; then
            latest_tag="v1.7.0"
          fi
          echo "latest_tag=$latest_tag" >> $GITHUB_OUTPUT

      - name: Generate new version
        id: generate_version
        run: |
          latest_tag=${{ steps.get_latest_tag.outputs.latest_tag }}
          # Remove 'v' prefix
          version=${latest_tag#v}
          # Split into major, minor, patch
          IFS='.' read -r major minor patch <<< "$version"
          # Increment patch version
          if [ -z "$patch" ]; then
            new_version="v1.7.0"
          else
            new_patch=$((patch + 1))
            new_version="v$major.$minor.$new_patch"
          fi
          echo "new_version=$new_version" >> $GITHUB_OUTPUT

      - name: Generate Release Notes
        id: release_notes
        run: |
          # Get the previous tag
          prev_tag=$(git tag --sort=-v:refname | head -n 1)

          # If no previous tag exists, get all commits
          if [ -z "$prev_tag" ]; then
            echo "## 🚀 What's Changed" > release_notes.md
            echo "" >> release_notes.md
            git log --pretty=format:"* %s (%h) by @%an" >> release_notes.md
          else
            echo "## 🚀 What's Changed" > release_notes.md
            echo "" >> release_notes.md
            echo "Changes since $prev_tag:" >> release_notes.md
            echo "" >> release_notes.md
            git log ${prev_tag}..HEAD --pretty=format:"* %s (%h) by @%an" >> release_notes.md
          fi

          # Add additional sections
          echo "" >> release_notes.md
          echo "## 🔍 Full Commit History" >> release_notes.md
          echo "" >> release_notes.md
          git log ${prev_tag}..HEAD --pretty=format:"* %h - %s%n  * %an <%ae>%n  * %aD%n" >> release_notes.md

      - name: Download JAR artifact
        uses: actions/download-artifact@v4
        with:
          name: jabberpoint-jar

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.generate_version.outputs.new_version }}
          name: Release ${{ steps.generate_version.outputs.new_version }}
          body_path: release_notes.md
          files: JabberPoint.jar
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
